unit uSimplex;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, Vcl.ExtCtrls;

type
  TfrmSimplex = class(TForm)
    pnl1: TPanel;
    edtRestricoes: TEdit;
    edtVariaveis: TEdit;
    lbl1: TLabel;
    lbl2: TLabel;
    grdSimplex: TStringGrid;
    btnGrid: TButton;
    btnCalcular: TButton;
    procedure btnGridClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnCalcularClick(Sender: TObject);
    procedure GravaTxt();
    procedure CalculaSimplex();
    function CompletaString(S: string; Ch: Char; Len: Integer): string;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmSimplex: TfrmSimplex;

implementation

{$R *.dfm}

function TfrmSimplex.CompletaString(S: string; Ch: Char; Len: Integer): string;
var   RestLen: Integer;
begin   Result  := S;
  RestLen := Len - Length(s);
  if RestLen < 1 then Exit;
  Result := StringOfChar(Ch, RestLen) + S;
end;

procedure TfrmSimplex.CalculaSimplex;
var
  linha,coluna,i,j:Integer;
  menor,divisao,mdivisao,pivo,fCoef:double;
begin
  menor := 999999999;
  mdivisao := 999999999;

  // Localiza a coluna do pivô,
  linha := grdSimplex.RowCount - 1;
  for I := 1 to grdSimplex.ColCount - 2 do
  begin
     if menor > StrToFloat(grdSimplex.Cells[i,linha]) then
     begin
       menor :=StrToFloat(grdSimplex.Cells[i,linha]);
       coluna := i;
     end;
  end;
  // Identifica a linha do pivô;
  for I := 1 to grdSimplex.RowCount - 2 do
  begin
     if (grdSimplex.Cells[grdSimplex.ColCount-1,i] <> '0') and
        (grdSimplex.Cells[coluna,i] <> '0') then
        divisao := StrToFloat(grdSimplex.Cells[grdSimplex.ColCount-1,i])/StrToFloat(grdSimplex.Cells[coluna,i]);
     if (divisao > 0) and (mdivisao > divisao) then
     begin
       mdivisao := divisao;
       pivo := StrToFloat(grdSimplex.Cells[coluna,i]);
       linha := i;
     end;
  end;
 // Divide toda a linha do pivô por ele mesmo para torná-lo unitário
  for I := 1 to grdSimplex.ColCount - 1 do
  begin
    if grdSimplex.Cells[i,linha] <> '0' then
    begin
      grdSimplex.Cells[i,linha] := FloatToStr(StrToFloat(grdSimplex.Cells[i,linha])/pivo);
    end;
  end;
  // [Item Corrente] = [Item Corrente] – [Valor da linha atual que se encontra na
  //  mesma coluna do pivo (valor antes de iniciar estes calculos) ] * [ Valor da
  // coluna atual que se encontra na mesma linha do pivo ]
  for I := 1 to grdSimplex.RowCount - 1 do
  begin
    if i <> linha then
    begin
      fCoef := StrToFloat(grdSimplex.Cells[coluna,i]);
      for J := 1 to grdSimplex.ColCount - 1 do
      begin
         grdSimplex.Cells[j,i] := grdSimplex.Cells[j,i];
         grdSimplex.Cells[j,i] := FloatToStr(StrToFloat(grdSimplex.Cells[j,i]) - fCoef *
                                             StrToFloat(grdSimplex.Cells[j,linha]));
      end;
    end
    else
    begin
      grdSimplex.Cells[0,i] := grdSimplex.Cells[coluna,0];
    end;
  end;
  grdSimplex.Refresh;
  for I := 1 to grdSimplex.ColCount - 1 do
  begin
    if Pos('-',grdSimplex.Cells[i,grdSimplex.RowCount - 1]) > 0 then
    begin
      GravaTxt();
      CalculaSimplex();
    end;
  end;
end;


procedure TfrmSimplex.GravaTxt;
var
  i,j:Integer;
  arq : TextFile;
begin
  //Grava num arquivo TXT
  AssignFile(arq, 'd:\Simplex.txt');
  {$I-}
  Reset(arq);
  {$I+}
  if (IOResult <> 0) then
    Rewrite(arq)
  else
  begin
    CloseFile(arq);
    Append(arq);
  end;
  for I := 0 to grdSimplex.RowCount - 1 do
  begin
    for J := 0 to grdSimplex.ColCount - 1 do
    begin
       write(arq,CompletaString(grdSimplex.Cells[j,i],' ', 10),'|');
    end;
    Writeln(arq,'');
  end;
  Writeln(arq,sLineBreak);
  CloseFile(arq);
end;

procedure TfrmSimplex.btnCalcularClick(Sender: TObject);
begin
  DeleteFile('d:\Simplex.txt');
  GravaTxt();
  CalculaSimplex();
  GravaTxt();
  winExec('Notepad.exe d:\Simplex.txt', sw_shownormal)
end;

procedure TfrmSimplex.btnGridClick(Sender: TObject);
var
 variaveis, restricoes,i,j,linha,cont:Integer;
begin
  variaveis := StrToInt(edtVariaveis.Text);
  restricoes := StrToInt(edtRestricoes.Text);

  for I := 0 to grdSimplex.RowCount -1 do
    grdSimplex.Rows[I].Clear;

  grdSimplex.ColCount := variaveis+restricoes+2;
  grdSimplex.RowCount := restricoes+2;

  //Preenche Grid
  cont := 1;
  grdSimplex.Cols[0].Add('Base');
  for I := 1 to variaveis + restricoes do
  begin
    if i <= variaveis then
      grdSimplex.Cols[i].Add('X'+inttostr(i))
    else
    begin
      grdSimplex.Cols[i].Add('F'+inttostr(cont));
      grdSimplex.Cells[i,cont] := '1';
      cont := cont + 1;
    end;
  end;
  grdSimplex.Cols[variaveis+restricoes+1].Add('R');

  for I := 1 to restricoes do
  begin
    grdSimplex.Cells[0,i] := 'F'+inttostr(i);
  end;
  grdSimplex.Cells[0,restricoes+1] := 'Z';

  for I := 1 to grdSimplex.RowCount - 1 do
  begin
    for J := 1 to grdSimplex.ColCount - 1 do
    begin
      if grdSimplex.Cells[j,i].IsEmpty then
      begin
        grdSimplex.Cells[j,i] := '0';
      end;
    end;
  end;
  grdSimplex.SetFocus;
end;

procedure TfrmSimplex.FormShow(Sender: TObject);
begin
  edtVariaveis.SetFocus;
end;

end.
